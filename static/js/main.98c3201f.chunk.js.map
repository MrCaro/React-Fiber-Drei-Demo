{"version":3,"sources":["3d/NOVELO_EARTH.glb","App.js","reportWebVitals.js","index.js"],"names":["softShadows","ModelCustom","props","group","useRef","useGLTF","Model","nodes","materials","scaleValue","useFrame","current","rotation","y","ref","dispose","scale","material","geometry","castShadow","Mat","CustomBoxMesh","position","args","color","speed","mesh","x","attach","MeshWobbleMaterial","factor","App","shadowMap","colorManagement","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","fallback","Stars","radius","depth","count","saturation","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAAe,G,MAAA,IAA0B,0C,OCSzCA,cAEA,IAAMC,EAAc,SAACC,GACjB,IAAMC,EAAQC,iBAAO,MADM,EAEEC,YAAQC,GAA7BC,EAFmB,EAEnBA,MAAOC,EAFY,EAEZA,UACTC,EAAa,IAInB,OAFAC,aAAS,kBAAOP,EAAMQ,QAAQC,SAASC,GAAK,QAGxC,gDAAOC,IAAKX,GAAWD,GAAvB,IAA8Ba,QAAS,KAAvC,UACI,sBAAMC,MAAO,CAACP,EAAYA,EAAYA,GAAaQ,SAAUT,EAAU,gBAAiBU,SAAUX,EAAM,mBAAmBW,WAC3H,sBAAMC,YAAU,EAACH,MAAO,CAACP,EAAYA,EAAYA,GAAaQ,SAAUT,EAAUY,IAAKF,SAAUX,EAAM,qBAAqBW,gBAKlIG,EAAgB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACtCC,EAAOtB,iBAAO,MAGpB,OAFAM,aAAS,kBAAOgB,EAAKf,QAAQC,SAASe,EAAID,EAAKf,QAAQC,SAASC,GAAK,OAGjE,uBAAMM,YAAU,EAACL,IAAKY,EAAMJ,SAAUA,EAAtC,UACI,mCAAmBM,OAAO,WAAWL,KAAMA,IAC3C,cAACM,EAAA,EAAD,CACID,OAAO,WACPJ,MAAOA,EACPC,MAAOA,EACPK,OAAQ,SA2DTC,MA1Cf,WACI,OACA,mCACI,eAAC,IAAD,CACIC,WAAS,EACTC,iBAAe,EACfC,OAAQ,CAACZ,SAAU,EAAE,EAAG,GAAI,IAAKa,IAAK,IAH1C,UAKI,8BAAcC,UAAW,KACzB,kCACIjB,YAAU,EACVG,SAAU,CAAC,EAAG,GAAI,GAClBc,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAE3B,cAAC,WAAD,CAAUC,SAAU,KAApB,SACI,cAAC,EAAD,MAEJ,4BAAYtB,SAAU,EAAE,GAAI,GAAI,IAAKc,UAAW,KAChD,4BAAYd,SAAU,CAAC,GAAI,GAAI,GAAIc,UAAW,MAC9C,cAAC,EAAD,CAAed,SAAU,EAAE,GAAI,IAAK,GAAIE,MAAM,QAAQC,MAAO,IAC7D,cAAC,EAAD,CAAeH,SAAU,CAAC,GAAI,IAAK,IAAKC,KAAM,CAAC,EAAG,GAAI,IAAKC,MAAM,YAAYC,MAAO,IACpF,cAAC,EAAD,CAAeH,SAAU,CAAC,GAAI,GAAI,IAAKE,MAAM,MAAMC,MAAO,IAC1D,cAACoB,EAAA,EAAD,CACIC,OAAQ,IACRC,MAAO,GACPC,MAAO,IACPlB,OAAQ,EACRmB,WAAY,IAEhB,cAACC,EAAA,EAAD,UC9EGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98c3201f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NOVELO_EARTH.a6ef1301.glb\";","\nimport { useRef, Suspense } from 'react';\n\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber';\nimport { softShadows, MeshWobbleMaterial, OrbitControls, Stars, useGLTF } from '@react-three/drei';\n\nimport './App.scss';\nimport Model from './3d/NOVELO_EARTH.glb';\n\nsoftShadows();\n\nconst ModelCustom = (props) => {\n    const group = useRef(null);\n    const { nodes, materials } = useGLTF(Model);\n    const scaleValue = 0.03;\n\n    useFrame(() => (group.current.rotation.y += 0.001));\n\n    return (\n        <group ref={group} {...props} dispose={null}>\n            <mesh scale={[scaleValue, scaleValue, scaleValue]} material={materials['02___Default']} geometry={nodes['buffer-0-mesh-0'].geometry} />\n            <mesh castShadow scale={[scaleValue, scaleValue, scaleValue]} material={materials.Mat} geometry={nodes['buffer-0-mesh-0_1'].geometry} />\n        </group>\n    )\n}\n\nconst CustomBoxMesh = ({ position, args, color, speed }) => {\n    const mesh = useRef(null);\n    useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n    return (\n        <mesh castShadow ref={mesh} position={position}>\n            <boxBufferGeometry attach='geometry' args={args} />\n            <MeshWobbleMaterial\n                attach='material'\n                color={color}\n                speed={speed}\n                factor={0.3}\n            />\n        </mesh>\n    )\n}\n\nconst Plane = () => {\n    return (\n        <group>\n            <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -3, 0]}>\n                <planeBufferGeometry attach='geometry' args={[50, 50]}/>\n                <shadowMaterial attach='material' opacity={.3} />\n            </mesh>\n        </group>\n    )\n}\n\nfunction App() {\n    return (\n    <>\n        <Canvas\n            shadowMap\n            colorManagement\n            camera={{position: [-5, 20, 50], fov: 70}}\n        >\n            <ambientLight intensity={.5} />\n            <directionalLight\n                castShadow\n                position={[0, 10, 0]}\n                intensity={1.5}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={1024}\n                shadow-camera-far={50}\n                shadow-camera-left={-10}\n                shadow-camera-right={10}\n                shadow-camera-top={10}\n                shadow-camera-bottom={-10}\n            />\n            <Suspense fallback={null}>\n                <ModelCustom />\n            </Suspense>\n            <pointLight position={[-10, 0, -20]} intensity={.5}/>\n            <pointLight position={[0, -10, 0]} intensity={1.5}/>\n            <CustomBoxMesh position={[-20, 25, -5]} color='green' speed={4}/>\n            <CustomBoxMesh position={[35, 15, -20]} args={[5, 10, 10]} color='lightgray' speed={1}/>\n            <CustomBoxMesh position={[12, 10, 11]} color='red' speed={4}/>\n            <Stars\n                radius={100} \n                depth={50} \n                count={5000} \n                factor={4} \n                saturation={0} \n            />\n            <OrbitControls/>\n        </Canvas>\n    </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}