{"version":3,"sources":["3d/NOVELO_EARTH.glb","App.js","reportWebVitals.js","index.js"],"names":["softShadows","PlanetEarth","props","group","useRef","useGLTF","Model","nodes","materials","useState","expand","setExpand","propClick","useSpring","scale","useFrame","current","rotation","y","ref","dispose","mesh","onClick","material","geometry","Mat","DisplayPlanetInfo","className","display","planet","name","info","App","showPlanetInfo","setShowPlanetInfo","visibilityPlanetInfo","setVisibilityPlanetInfo","shadowMap","colorManagement","camera","position","fov","intensity","castShadow","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","fallback","PlanetsData","map","i","Stars","radius","depth","count","factor","saturation","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"u8BAAe,MAA0B,yC,QCWzCA,cAEA,IAAMC,EAAc,SAACC,GACjB,IAAMC,EAAQC,iBAAO,MADM,EAEEC,YAAQC,GAA7BC,EAFmB,EAEnBA,MAAOC,EAFY,EAEZA,UAFY,EAKCC,oBAAS,GALV,mBAKpBC,EALoB,KAKZC,EALY,KAOrBC,EAAYC,YAAU,CACxBC,MAAOJ,EAAS,CAAC,IAAM,IAAM,KALd,CAAC,IAAM,IAAM,OAUhC,OAFAK,aAAS,kBAAOZ,EAAMa,QAAQC,SAASC,GAAK,QAGxC,gDAAOC,IAAKhB,GAAWD,GAAvB,IAA8BkB,QAAS,KAAvC,UACI,cAAC,IAAEC,KAAH,CAAQC,QAAS,kBAAMX,GAAWD,IAASI,MAAOF,EAAUE,MAAOS,SAAUf,EAAU,gBAAiBgB,SAAUjB,EAAM,mBAAmBiB,WAC3I,cAAC,IAAEH,KAAH,CAAQC,QAAS,kBAAMX,GAAWD,IAASI,MAAOF,EAAUE,MAAOS,SAAUf,EAAUiB,IAAKD,SAAUjB,EAAM,qBAAqBiB,gBAKvIE,EAAoB,SAACxB,GACvB,OACI,qBAAKyB,UAAWzB,EAAM0B,QAAtB,SACI,sBAAKD,UAAU,sBAAf,UACI,6BAAKzB,EAAM2B,OAAOC,OAClB,4BAAI5B,EAAM2B,OAAOE,aA0DlBC,MApDf,WAAgB,IAAD,EACiCvB,mBAAS,IAD1C,mBACJwB,EADI,KACYC,EADZ,OAE6CzB,oBAAS,GAFtD,mBAEJ0B,EAFI,KAEkBC,EAFlB,KAIX,OACA,qCACI,eAAC,IAAD,CACIC,WAAS,EACTC,iBAAe,EACfC,OAAQ,CAACC,SAAU,CAAC,GAAI,GAAI,IAAKC,IAAK,IAH1C,UAKI,8BAAcC,UAAW,KACzB,kCACIC,YAAU,EACVH,SAAU,CAAC,EAAG,GAAI,GAClBE,UAAW,IACXE,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAE3B,4BAAYV,SAAU,EAAE,GAAI,GAAI,IAAKE,UAAW,KAChD,4BAAYF,SAAU,CAAC,GAAI,GAAI,GAAIE,UAAW,MAC9C,cAAC,WAAD,CAAUS,SAAU,KAApB,SACKC,EAAYC,KAAI,SAACxB,EAAQyB,GAAT,OACb,cAAC,EAAD,CAEIhC,QAAS,WAAOY,EAAkBL,GAASO,GAAyBD,IACpEK,SAAUX,EAAOW,UAFZc,QAMjB,cAACC,EAAA,EAAD,CACIC,OAAQ,IACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,IAEhB,cAACC,EAAA,EAAD,OAEJ,cAAC,EAAD,CACIjC,QAASO,EAAuB,GAAK,OACrCN,OAAQI,QC/EL6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f38aa426.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NOVELO_EARTH.a6ef1301.glb\";","\nimport { useRef, Suspense, useState } from 'react';\n\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { softShadows, OrbitControls, Stars, useGLTF } from '@react-three/drei';\nimport { useSpring, a } from 'react-spring/three';\n\nimport './App.scss';\nimport PlanetsData from './data/planets.json';\nimport Model from './3d/NOVELO_EARTH.glb';\n\nsoftShadows();\n\nconst PlanetEarth = (props) => {\n    const group = useRef(null);\n    const { nodes, materials } = useGLTF(Model);\n    const scaleValue = [0.03, 0.03, 0.03];\n\n    const [expand, setExpand] = useState(false);\n\n    const propClick = useSpring({\n        scale: expand ? [0.06, 0.06, 0.06] : scaleValue\n    });\n\n    useFrame(() => (group.current.rotation.y += 0.001));\n\n    return (\n        <group ref={group} {...props} dispose={null} >\n            <a.mesh onClick={() => setExpand(!expand)} scale={propClick.scale} material={materials['02___Default']} geometry={nodes['buffer-0-mesh-0'].geometry} />\n            <a.mesh onClick={() => setExpand(!expand)} scale={propClick.scale} material={materials.Mat} geometry={nodes['buffer-0-mesh-0_1'].geometry} />\n        </group>\n    )\n}\n\nconst DisplayPlanetInfo = (props) => {                                                                   \n    return (\n        <div className={props.display}>\n            <div className=\"planet-info-wrapper\">\n                <h1>{props.planet.name}</h1>\n                <p>{props.planet.info}</p>\n            </div>\n        </div>\n    );\n}\n\nfunction App() {\n    const [showPlanetInfo, setShowPlanetInfo] = useState('');\n    const [visibilityPlanetInfo, setVisibilityPlanetInfo] = useState(false);\n\n    return (\n    <>\n        <Canvas\n            shadowMap\n            colorManagement\n            camera={{position: [10, 50, 50], fov: 70}}\n        >\n            <ambientLight intensity={.5} />\n            <directionalLight\n                castShadow\n                position={[0, 10, 0]}\n                intensity={1.5}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={1024}\n                shadow-camera-far={50}\n                shadow-camera-left={-10}\n                shadow-camera-right={10}\n                shadow-camera-top={10}\n                shadow-camera-bottom={-10}\n            />\n            <pointLight position={[-10, 0, -20]} intensity={.5}/>\n            <pointLight position={[0, -10, 0]} intensity={1.5}/>\n            <Suspense fallback={null}>\n                {PlanetsData.map((planet, i) => (\n                    <PlanetEarth \n                        key={i} \n                        onClick={() => {setShowPlanetInfo(planet); setVisibilityPlanetInfo(!visibilityPlanetInfo)}} \n                        position={planet.position}\n                    />\n                ))}\n            </Suspense>\n            <Stars\n                radius={100} \n                depth={50} \n                count={5000} \n                factor={4} \n                saturation={0} \n            />\n            <OrbitControls />\n        </Canvas>\n        <DisplayPlanetInfo \n            display={visibilityPlanetInfo ? \"\" : \"hide\"}  \n            planet={showPlanetInfo} \n        />\n    </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}